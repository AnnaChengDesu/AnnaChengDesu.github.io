<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Factory Pattern on Anna.me</title>
    <link>https://annachengdesu.github.io/tags/factory-pattern/</link>
    <description>Recent content in Factory Pattern on Anna.me</description>
    <image>
      <title>Anna.me</title>
      <url>https://annachengdesu.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://annachengdesu.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://annachengdesu.github.io/tags/factory-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>02-Factory Pattern 工厂模式-vanilla篇</title>
      <link>https://annachengdesu.github.io/post/patterns/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://annachengdesu.github.io/post/patterns/factory/</guid>
      <description>通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数不使用 new 关键字来返回一个新对象时，它就是一个工厂函数。
假设我们的应用程序需要许多用户。我们可以使用 firstName 、 lastName 和 email 属性创建新用户。工厂函数还将 fullName 属性添加到新创建的对象中，该属性返回 firstName 和 lastName 。
const createUser = ({ firstName, lastName, email }) =&amp;gt; ({ firstName, lastName, email, fullName() { return `${this.firstName} ${this.lastName}`; }, }); 现在我们可以通过调用 createUser 函数轻松创建多个用户。
const user1 = createUser({ firstName: &amp;#34;Anna&amp;#34;, lastName: &amp;#34;Cheng&amp;#34;, email: &amp;#34;AnnaCheng@gmail.com&amp;#34;, }); 如果我们要创建相对复杂且可配置的对象，工厂模式会很有用。键和值的值可能取决于特定的环境或配置。使用工厂模式，我们可以轻松创建包含自定义键和值的新对象。
const createObjectFromArray = ([key, value]) =&amp;gt; ({ [key]: value, }); createObjectFromArray([&amp;#34;name&amp;#34;, &amp;#34;John&amp;#34;]); // { name: &amp;#34;John&amp;#34; } 优点 当我们必须创建多个共享相同属性的较小对象时，工厂模式非常有用。工厂函数可以根据当前环境或用户特定的配置轻松返回自定义对象。</description>
    </item>
    
  </channel>
</rss>
