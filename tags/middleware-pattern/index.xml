<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Middleware Pattern on Anna.me</title>
    <link>https://annachengdesu.github.io/tags/middleware-pattern/</link>
    <description>Recent content in Middleware Pattern on Anna.me</description>
    <image>
      <title>Anna.me</title>
      <url>https://annachengdesu.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://annachengdesu.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Aug 2023 19:46:32 +0800</lastBuildDate><atom:link href="https://annachengdesu.github.io/tags/middleware-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>03-Mediator/Middleware Pattern-设计模式学习-vanilla篇</title>
      <link>https://annachengdesu.github.io/post/patterns/mediator-pattern/</link>
      <pubDate>Wed, 02 Aug 2023 19:46:32 +0800</pubDate>
      
      <guid>https://annachengdesu.github.io/post/patterns/mediator-pattern/</guid>
      <description>Mediator/Middleware Pattern 中介者/中间件模式 中介者模式使组件可以通过一个中心点（中介者）相互交互。中介者不是直接相互交谈，而是接收请求并将其转发。在 JavaScript 中，中介者通常只不过是一个对象文字或一个函数。
可以将此模式与空中交通管制员和飞行员之间的关系进行比较。飞行员之间不会直接相互交谈（这可能会导致混乱），而是与空中交通管制员交谈。空中交通管制员确保所有飞机都能收到安全飞行所需的信息，而不会撞到其他飞机。
在 Javascript 中，我们经常需要处理对象之间的多向数据。项目中如果有大量组件，组件之间的通信很可能会变得相当混乱。
对象的请求由中介处理，而不是让每个对象直接与其他对象对话，从而形成多对多关系。中介器处理该请求，并将其转发到需要的位置。
调解者模式的一个很好的用例是聊天室。聊天室中的用户不会直接相互交谈。相反，聊天室充当用户之间的中介。
class ChatRoom { logMessage(user, message) { const time = new Date(); const sender = user.getName(); console.log(`${time} [${sender}]: ${message}`); } } class User { constructor(name, chatroom) { this.name = name; this.chatroom = chatroom; } getName() { return this.name; } send(message) { this.chatroom.logMessage(this, message); } } 我们可以创建连接到聊天室的新用户。每个用户实例都有一个 send 方法，我们可以使用它来发送消息。
const chatroom = new ChatRoom(); const user1 = new User(&amp;#34;John Doe&amp;#34;, chatroom); const user2 = new User(&amp;#34;Jane Doe&amp;#34;, chatroom); user1.</description>
    </item>
    
  </channel>
</rss>
